% PID Design
% 1. Design Criteria
%   a. Transient Design Specification
%   b. Steady-state Design Specification
% 2. Design PID
% 3. Introduction of Noise 
% 4. Step Response
% 5. Square Wave Response
% 6. Sinusoidal Response 


% SISO, Location #1, Linearized Actuator, Linearized Sensor
% p.133 3a)
A = [0 1; 0 0];
B = [0; 826];
C = [1 0];

% Create state-space model 
ss_ol = ss(A,B,C,0);

% Convert state-space representation to transfer function
[num,denom]= ss2tf(A,B,C,0)
tf_ol = tf(num,denom)

% Find poles of open-loop system
% by finding the eigenvalues of the 
% system matrix A. These poles are
% equal to the poles of the transfer
% function, and determine stability. 
% det(sI - A) = 0
poles = eig(A)

% 6. Design a PID Controller
    % Design Specifications: 
        % Stable
        % less than 10% overshoot
        % Settling time of < 1 second

% Control System Designer used to meet criteria
%sisotool(ss_ol)
% Exported Controller Designs
load('TFPID_file.mat')
load('TFPID_file.mat')
load('PDController_file.mat')
load('PIDController_file.mat')

%Design 1 - PID
%controller
PIDcontroller;
% TF of system
TFPID;

%Design 2 - PD
%controller
PDcontroller;
% TF of system
TFPD;
%Paralelle Form
[Kp1,Ki1,Kd1,Tf2] = piddata(PDcontroller);

% 7. Step, Square Wave, and Sinusoidal Responses to controllers

% Design #1 - PID: 

% Obtain Step Response of system with PID 
figure(1)
sgtitle('Classical Controllers')
subplot(3,2,1)
step(TFPID)
title({'\fontsize{16}PID Controller';'\fontsize{11}Step Response'})

% Obtain Square Wave Response of system with PID
subplot(3,2,3)
[u_square,t] = gensig('square',4,10,0.1);
lsimplot(TFPID,u_square,t)
title('Square Wave Response')

% Obtain Sinusoidal Response of system with PID 
subplot(3,2,5)
[u_sin,t] = gensig('sin',4,10,0.1);
lsimplot(TFPID,u_sin,t)
title('Sinusoidal Response')

%
% Design #2 - PD: 
% Obtain Step Response of system with PD 
subplot(3,2,2)
step(TFPD)
title({'\fontsize{16}PD Controller';'\fontsize{11}Step Response'})

% Obtain Square Wave Response of system with PID
subplot(3,2,4)
[u_square,t] = gensig('square',4,10,0.1);
lsimplot(TFPD,u_square,t)
title('Square Wave Response')

% Obtain Sinusoidal Response of system with PID 
subplot(3,2,6)
[u_sin,t] = gensig('sin',4,10,0.1);
lsimplot(TFPD,u_sin,t)
title('Sinusoidal Response')

% 8. Noise Injection ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% Design 1 - PID: Step, Square Wave, and Sinusoidal Responses
% Obtain Step Response of system and PID with NOISE
figure(2)
subplot(3,2,1)
t_step = 0:0.01:0.6;
u_step = 0.001*ones(size(t_step));
% Inject white noise into the system
y_step = awgn(u_step,15,'measured');
lsimplot(TFPID,y_step,t_step)
title({'\fontsize{16}PID Controller';'\fontsize{11}Step response with SNR 15'})

% Obtain Square Wave Response of system with PID
subplot(3,2,3)
[u_square,t] = gensig('square',4,10,0.1);
% Inject white noise into the system
y_square = awgn(u_square,15,'measured');
lsimplot(TFPID,y_square,t)
%plot(t,[u_square y_square])
title('Square Wave Response with SNR 15')

% Obtain Sinusoidal Response of system with PID 
subplot(3,2,5)
[u_sin,t] = gensig('sin',4,10,0.1);
% Inject white noise into the system
y_sin = awgn(u_sin,15,'measured');
lsimplot(TFPID,y_sin,t)
%plot(t,[u_sin y])
title('Sinusoidal Response with SNR 15')

%
% Design #2 - PD: 
% Step with PD 
subplot(3,2,2)
t_step = 0:0.01:0.6;
u_step = 0.001*ones(size(t_step));
% Inject white noise into the system
y_step = awgn(u_step,15,'measured');
lsimplot(TFPD,y_step,t_step)
title({'\fontsize{16}PD Controller';'\fontsize{11}Step response with SNR 15'})

% Square with PD
subplot(3,2,4)
[u_square,t] = gensig('square',4,10,0.1);
% Inject white noise into the system
y_square = awgn(u_square,15,'measured');
lsimplot(TFPD,y_square,t)
title('Square Wave Response with SNR 15')

% Sin. Resp with PD
subplot(3,2,6)
[u_sin,t] = gensig('sin',4,10,0.1);
% Inject white noise into the system
y_sin = awgn(u_sin,15,'measured');
lsimplot(TFPD,y_sin,t)
title('Sinusoidal Response SNR 15')